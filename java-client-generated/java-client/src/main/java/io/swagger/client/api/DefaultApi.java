/*
 * Recipe Rex API
 * Rest services for Recipe Rex web application. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Cookbook;
import io.swagger.client.model.Meal;
import io.swagger.client.model.MealPlan;
import io.swagger.client.model.Recipe;
import io.swagger.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addIngredientToPantry */
    private com.squareup.okhttp.Call addIngredientToPantryCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/pantry/ingredients/{ingredientId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "ingredientId" + "\\}", apiClient.escapeString(ingredientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addIngredientToPantryValidateBeforeCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addIngredientToPantry(Async)");
        }
        
        // verify the required parameter 'ingredientId' is set
        if (ingredientId == null) {
            throw new ApiException("Missing the required parameter 'ingredientId' when calling addIngredientToPantry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addIngredientToPantryCall(username, ingredientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds an ingredient to a user&#39;s pantry
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addIngredientToPantry(String username, String ingredientId) throws ApiException {
        addIngredientToPantryWithHttpInfo(username, ingredientId);
    }

    /**
     * Adds an ingredient to a user&#39;s pantry
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addIngredientToPantryWithHttpInfo(String username, String ingredientId) throws ApiException {
        com.squareup.okhttp.Call call = addIngredientToPantryValidateBeforeCall(username, ingredientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds an ingredient to a user&#39;s pantry (asynchronously)
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addIngredientToPantryAsync(String username, String ingredientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addIngredientToPantryValidateBeforeCall(username, ingredientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addMealToMealPlan */
    private com.squareup.okhttp.Call addMealToMealPlanCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlans/{mealPlanId}/meals/{mealId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealPlanId" + "\\}", apiClient.escapeString(mealPlanId.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMealToMealPlanValidateBeforeCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addMealToMealPlan(Async)");
        }
        
        // verify the required parameter 'mealPlanId' is set
        if (mealPlanId == null) {
            throw new ApiException("Missing the required parameter 'mealPlanId' when calling addMealToMealPlan(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling addMealToMealPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addMealToMealPlanCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a meal to the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be added to the mealPlan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addMealToMealPlan(String username, String mealPlanId, Long mealId) throws ApiException {
        addMealToMealPlanWithHttpInfo(username, mealPlanId, mealId);
    }

    /**
     * Adds a meal to the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be added to the mealPlan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addMealToMealPlanWithHttpInfo(String username, String mealPlanId, Long mealId) throws ApiException {
        com.squareup.okhttp.Call call = addMealToMealPlanValidateBeforeCall(username, mealPlanId, mealId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a meal to the specified mealPlan in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be added to the mealPlan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMealToMealPlanAsync(String username, String mealPlanId, Long mealId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMealToMealPlanValidateBeforeCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRecipe */
    private com.squareup.okhttp.Call addRecipeCall(Long recipeId, Recipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRecipeValidateBeforeCall(Long recipeId, Recipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling addRecipe(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRecipeCall(recipeId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new recipe to the database
     * 
     * @param recipeId Recipe id to delete (required)
     * @param body Recipe object that needs to be added to the database (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRecipe(Long recipeId, Recipe body) throws ApiException {
        addRecipeWithHttpInfo(recipeId, body);
    }

    /**
     * Add a new recipe to the database
     * 
     * @param recipeId Recipe id to delete (required)
     * @param body Recipe object that needs to be added to the database (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRecipeWithHttpInfo(Long recipeId, Recipe body) throws ApiException {
        com.squareup.okhttp.Call call = addRecipeValidateBeforeCall(recipeId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new recipe to the database (asynchronously)
     * 
     * @param recipeId Recipe id to delete (required)
     * @param body Recipe object that needs to be added to the database (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRecipeAsync(Long recipeId, Recipe body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRecipeValidateBeforeCall(recipeId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRecipeToCookbook */
    private com.squareup.okhttp.Call addRecipeToCookbookCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks/{cookbookId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "cookbookId" + "\\}", apiClient.escapeString(cookbookId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRecipeToCookbookValidateBeforeCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addRecipeToCookbook(Async)");
        }
        
        // verify the required parameter 'cookbookId' is set
        if (cookbookId == null) {
            throw new ApiException("Missing the required parameter 'cookbookId' when calling addRecipeToCookbook(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling addRecipeToCookbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRecipeToCookbookCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a recipe to the specified cookbook to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRecipeToCookbook(String username, String cookbookId, Long recipeId) throws ApiException {
        addRecipeToCookbookWithHttpInfo(username, cookbookId, recipeId);
    }

    /**
     * Adds a recipe to the specified cookbook to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRecipeToCookbookWithHttpInfo(String username, String cookbookId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = addRecipeToCookbookValidateBeforeCall(username, cookbookId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a recipe to the specified cookbook to the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRecipeToCookbookAsync(String username, String cookbookId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRecipeToCookbookValidateBeforeCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRecipeToMeal */
    private com.squareup.okhttp.Call addRecipeToMealCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals/{mealId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRecipeToMealValidateBeforeCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling addRecipeToMeal(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling addRecipeToMeal(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling addRecipeToMeal(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRecipeToMealCall(username, mealId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a recipe to the specified meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be added to the meal (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRecipeToMeal(String username, String mealId, Long recipeId) throws ApiException {
        addRecipeToMealWithHttpInfo(username, mealId, recipeId);
    }

    /**
     * Adds a recipe to the specified meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be added to the meal (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRecipeToMealWithHttpInfo(String username, String mealId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = addRecipeToMealValidateBeforeCall(username, mealId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a recipe to the specified meal to the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be added to the meal (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRecipeToMealAsync(String username, String mealId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRecipeToMealValidateBeforeCall(username, mealId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createCookbook */
    private com.squareup.okhttp.Call createCookbookCall(String username, String cookbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks/{cookbookId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "cookbookId" + "\\}", apiClient.escapeString(cookbookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "applictiaon/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCookbookValidateBeforeCall(String username, String cookbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createCookbook(Async)");
        }
        
        // verify the required parameter 'cookbookId' is set
        if (cookbookId == null) {
            throw new ApiException("Missing the required parameter 'cookbookId' when calling createCookbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createCookbookCall(username, cookbookId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new cookbook to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createCookbook(String username, String cookbookId) throws ApiException {
        createCookbookWithHttpInfo(username, cookbookId);
    }

    /**
     * Creates a new cookbook to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createCookbookWithHttpInfo(String username, String cookbookId) throws ApiException {
        com.squareup.okhttp.Call call = createCookbookValidateBeforeCall(username, cookbookId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a new cookbook to the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCookbookAsync(String username, String cookbookId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCookbookValidateBeforeCall(username, cookbookId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createMeal */
    private com.squareup.okhttp.Call createMealCall(String username, String mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals/{mealId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "applictiaon/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMealValidateBeforeCall(String username, String mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createMeal(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling createMeal(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMealCall(username, mealId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal to be created (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createMeal(String username, String mealId) throws ApiException {
        createMealWithHttpInfo(username, mealId);
    }

    /**
     * Creates a new meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal to be created (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createMealWithHttpInfo(String username, String mealId) throws ApiException {
        com.squareup.okhttp.Call call = createMealValidateBeforeCall(username, mealId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a new meal to the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMealAsync(String username, String mealId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMealValidateBeforeCall(username, mealId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createMealPlan */
    private com.squareup.okhttp.Call createMealPlanCall(String username, String mealPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlans/{mealPlanId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealPlanId" + "\\}", apiClient.escapeString(mealPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "applictiaon/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMealPlanValidateBeforeCall(String username, String mealPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createMealPlan(Async)");
        }
        
        // verify the required parameter 'mealPlanId' is set
        if (mealPlanId == null) {
            throw new ApiException("Missing the required parameter 'mealPlanId' when calling createMealPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMealPlanCall(username, mealPlanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan to be created (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createMealPlan(String username, String mealPlanId) throws ApiException {
        createMealPlanWithHttpInfo(username, mealPlanId);
    }

    /**
     * Creates a new meal to the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan to be created (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createMealPlanWithHttpInfo(String username, String mealPlanId) throws ApiException {
        com.squareup.okhttp.Call call = createMealPlanValidateBeforeCall(username, mealPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a new meal to the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMealPlanAsync(String username, String mealPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMealPlanValidateBeforeCall(username, mealPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createUser */
    private com.squareup.okhttp.Call createUserCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUserCall(username, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param username The name of the user to be created (required)
     * @param body Created user object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUser(String username, User body) throws ApiException {
        createUserWithHttpInfo(username, body);
    }

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param username The name of the user to be created (required)
     * @param body Created user object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUserWithHttpInfo(String username, User body) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create user (asynchronously)
     * This can only be done by the logged in user.
     * @param username The name of the user to be created (required)
     * @param body Created user object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(String username, User body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(username, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteIngredientFromPantry */
    private com.squareup.okhttp.Call deleteIngredientFromPantryCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/pantry/ingredients/{ingredientId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "ingredientId" + "\\}", apiClient.escapeString(ingredientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIngredientFromPantryValidateBeforeCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteIngredientFromPantry(Async)");
        }
        
        // verify the required parameter 'ingredientId' is set
        if (ingredientId == null) {
            throw new ApiException("Missing the required parameter 'ingredientId' when calling deleteIngredientFromPantry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteIngredientFromPantryCall(username, ingredientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIngredientFromPantry(String username, String ingredientId) throws ApiException {
        deleteIngredientFromPantryWithHttpInfo(username, ingredientId);
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIngredientFromPantryWithHttpInfo(String username, String ingredientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteIngredientFromPantryValidateBeforeCall(username, ingredientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIngredientFromPantryAsync(String username, String ingredientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIngredientFromPantryValidateBeforeCall(username, ingredientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteMealFromMealPlan */
    private com.squareup.okhttp.Call deleteMealFromMealPlanCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlans/{mealPlanId}/meals/{mealId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealPlanId" + "\\}", apiClient.escapeString(mealPlanId.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMealFromMealPlanValidateBeforeCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteMealFromMealPlan(Async)");
        }
        
        // verify the required parameter 'mealPlanId' is set
        if (mealPlanId == null) {
            throw new ApiException("Missing the required parameter 'mealPlanId' when calling deleteMealFromMealPlan(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling deleteMealFromMealPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteMealFromMealPlanCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be deleted from the mealPlan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMealFromMealPlan(String username, String mealPlanId, Long mealId) throws ApiException {
        deleteMealFromMealPlanWithHttpInfo(username, mealPlanId, mealId);
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be deleted from the mealPlan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMealFromMealPlanWithHttpInfo(String username, String mealPlanId, Long mealId) throws ApiException {
        com.squareup.okhttp.Call call = deleteMealFromMealPlanValidateBeforeCall(username, mealPlanId, mealId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of mealPlans (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to be deleted from the mealPlan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMealFromMealPlanAsync(String username, String mealPlanId, Long mealId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMealFromMealPlanValidateBeforeCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRecipe */
    private com.squareup.okhttp.Call deleteRecipeCall(Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecipeValidateBeforeCall(Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling deleteRecipe(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRecipeCall(recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a recipe
     * 
     * @param recipeId Recipe id to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRecipe(Long recipeId) throws ApiException {
        deleteRecipeWithHttpInfo(recipeId);
    }

    /**
     * Deletes a recipe
     * 
     * @param recipeId Recipe id to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRecipeWithHttpInfo(Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecipeValidateBeforeCall(recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a recipe (asynchronously)
     * 
     * @param recipeId Recipe id to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecipeAsync(Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecipeValidateBeforeCall(recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRecipeFromMeal */
    private com.squareup.okhttp.Call deleteRecipeFromMealCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals/{mealId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecipeFromMealValidateBeforeCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteRecipeFromMeal(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling deleteRecipeFromMeal(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling deleteRecipeFromMeal(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRecipeFromMealCall(username, mealId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a recipe from the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be deleted from the meal (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRecipeFromMeal(String username, String mealId, Long recipeId) throws ApiException {
        deleteRecipeFromMealWithHttpInfo(username, mealId, recipeId);
    }

    /**
     * Deletes a recipe from the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be deleted from the meal (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRecipeFromMealWithHttpInfo(String username, String mealId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecipeFromMealValidateBeforeCall(username, mealId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a recipe from the specified cookbook in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to be deleted from the meal (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecipeFromMealAsync(String username, String mealId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecipeFromMealValidateBeforeCall(username, mealId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRecipeInCookbook */
    private com.squareup.okhttp.Call deleteRecipeInCookbookCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks/{cookbookId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "cookbookId" + "\\}", apiClient.escapeString(cookbookId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecipeInCookbookValidateBeforeCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteRecipeInCookbook(Async)");
        }
        
        // verify the required parameter 'cookbookId' is set
        if (cookbookId == null) {
            throw new ApiException("Missing the required parameter 'cookbookId' when calling deleteRecipeInCookbook(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling deleteRecipeInCookbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRecipeInCookbookCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRecipeInCookbook(String username, String cookbookId, Long recipeId) throws ApiException {
        deleteRecipeInCookbookWithHttpInfo(username, cookbookId, recipeId);
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRecipeInCookbookWithHttpInfo(String username, String cookbookId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecipeInCookbookValidateBeforeCall(username, cookbookId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecipeInCookbookAsync(String username, String cookbookId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecipeInCookbookValidateBeforeCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserCall(username, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String username) throws ApiException {
        deleteUserWithHttpInfo(username);
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user (asynchronously)
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String username, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getCookbookRecipes */
    private com.squareup.okhttp.Call getCookbookRecipesCall(String username, String cookbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks/{cookbookId}/recipes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "cookbookId" + "\\}", apiClient.escapeString(cookbookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCookbookRecipesValidateBeforeCall(String username, String cookbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCookbookRecipes(Async)");
        }
        
        // verify the required parameter 'cookbookId' is set
        if (cookbookId == null) {
            throw new ApiException("Missing the required parameter 'cookbookId' when calling getCookbookRecipes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCookbookRecipesCall(username, cookbookId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch all recipes in the specified cookbook
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @return List&lt;Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Recipe> getCookbookRecipes(String username, String cookbookId) throws ApiException {
        ApiResponse<List<Recipe>> resp = getCookbookRecipesWithHttpInfo(username, cookbookId);
        return resp.getData();
    }

    /**
     * Fetch all recipes in the specified cookbook
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @return ApiResponse&lt;List&lt;Recipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Recipe>> getCookbookRecipesWithHttpInfo(String username, String cookbookId) throws ApiException {
        com.squareup.okhttp.Call call = getCookbookRecipesValidateBeforeCall(username, cookbookId, null, null);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all recipes in the specified cookbook (asynchronously)
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCookbookRecipesAsync(String username, String cookbookId, final ApiCallback<List<Recipe>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCookbookRecipesValidateBeforeCall(username, cookbookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCookbooksByUserId */
    private com.squareup.okhttp.Call getCookbooksByUserIdCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCookbooksByUserIdValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCookbooksByUserId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCookbooksByUserIdCall(username, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds cookbooks by userId
     * 
     * @param username Username to use to find cookbooks (required)
     * @return List&lt;Cookbook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Cookbook> getCookbooksByUserId(String username) throws ApiException {
        ApiResponse<List<Cookbook>> resp = getCookbooksByUserIdWithHttpInfo(username);
        return resp.getData();
    }

    /**
     * Finds cookbooks by userId
     * 
     * @param username Username to use to find cookbooks (required)
     * @return ApiResponse&lt;List&lt;Cookbook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Cookbook>> getCookbooksByUserIdWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = getCookbooksByUserIdValidateBeforeCall(username, null, null);
        Type localVarReturnType = new TypeToken<List<Cookbook>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds cookbooks by userId (asynchronously)
     * 
     * @param username Username to use to find cookbooks (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCookbooksByUserIdAsync(String username, final ApiCallback<List<Cookbook>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCookbooksByUserIdValidateBeforeCall(username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Cookbook>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMealPlanMeals */
    private com.squareup.okhttp.Call getMealPlanMealsCall(String username, String mealPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlan/{mealPlanId}/meals".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealPlanId" + "\\}", apiClient.escapeString(mealPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealPlanMealsValidateBeforeCall(String username, String mealPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlanMeals(Async)");
        }
        
        // verify the required parameter 'mealPlanId' is set
        if (mealPlanId == null) {
            throw new ApiException("Missing the required parameter 'mealPlanId' when calling getMealPlanMeals(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMealPlanMealsCall(username, mealPlanId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch all meals in the specified mealPlan
     * 
     * @param username Username associated with the mealPlan (required)
     * @param mealPlanId Id of the mealPlan the meals are in (required)
     * @return List&lt;Meal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Meal> getMealPlanMeals(String username, String mealPlanId) throws ApiException {
        ApiResponse<List<Meal>> resp = getMealPlanMealsWithHttpInfo(username, mealPlanId);
        return resp.getData();
    }

    /**
     * Fetch all meals in the specified mealPlan
     * 
     * @param username Username associated with the mealPlan (required)
     * @param mealPlanId Id of the mealPlan the meals are in (required)
     * @return ApiResponse&lt;List&lt;Meal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Meal>> getMealPlanMealsWithHttpInfo(String username, String mealPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getMealPlanMealsValidateBeforeCall(username, mealPlanId, null, null);
        Type localVarReturnType = new TypeToken<List<Meal>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all meals in the specified mealPlan (asynchronously)
     * 
     * @param username Username associated with the mealPlan (required)
     * @param mealPlanId Id of the mealPlan the meals are in (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealPlanMealsAsync(String username, String mealPlanId, final ApiCallback<List<Meal>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealPlanMealsValidateBeforeCall(username, mealPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Meal>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMealPlansByUserId */
    private com.squareup.okhttp.Call getMealPlansByUserIdCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlans".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealPlansByUserIdValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealPlansByUserId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMealPlansByUserIdCall(username, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds mealPlans by userId
     * 
     * @param username Username to use to find mealPlans (required)
     * @return List&lt;MealPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MealPlan> getMealPlansByUserId(String username) throws ApiException {
        ApiResponse<List<MealPlan>> resp = getMealPlansByUserIdWithHttpInfo(username);
        return resp.getData();
    }

    /**
     * Finds mealPlans by userId
     * 
     * @param username Username to use to find mealPlans (required)
     * @return ApiResponse&lt;List&lt;MealPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MealPlan>> getMealPlansByUserIdWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = getMealPlansByUserIdValidateBeforeCall(username, null, null);
        Type localVarReturnType = new TypeToken<List<MealPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds mealPlans by userId (asynchronously)
     * 
     * @param username Username to use to find mealPlans (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealPlansByUserIdAsync(String username, final ApiCallback<List<MealPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealPlansByUserIdValidateBeforeCall(username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MealPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMealRecipes */
    private com.squareup.okhttp.Call getMealRecipesCall(String username, String mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals/{mealId}/recipes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealRecipesValidateBeforeCall(String username, String mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealRecipes(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling getMealRecipes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMealRecipesCall(username, mealId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch all recipes in the specified meal
     * 
     * @param username Username associated with the meal (required)
     * @param mealId Id of the meal the recipes are in (required)
     * @return List&lt;Recipe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Recipe> getMealRecipes(String username, String mealId) throws ApiException {
        ApiResponse<List<Recipe>> resp = getMealRecipesWithHttpInfo(username, mealId);
        return resp.getData();
    }

    /**
     * Fetch all recipes in the specified meal
     * 
     * @param username Username associated with the meal (required)
     * @param mealId Id of the meal the recipes are in (required)
     * @return ApiResponse&lt;List&lt;Recipe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Recipe>> getMealRecipesWithHttpInfo(String username, String mealId) throws ApiException {
        com.squareup.okhttp.Call call = getMealRecipesValidateBeforeCall(username, mealId, null, null);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all recipes in the specified meal (asynchronously)
     * 
     * @param username Username associated with the meal (required)
     * @param mealId Id of the meal the recipes are in (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealRecipesAsync(String username, String mealId, final ApiCallback<List<Recipe>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealRecipesValidateBeforeCall(username, mealId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Recipe>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMealsByUserId */
    private com.squareup.okhttp.Call getMealsByUserIdCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealsByUserIdValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMealsByUserId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMealsByUserIdCall(username, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds meals by userId
     * 
     * @param username Username to use to find meals (required)
     * @return List&lt;Meal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Meal> getMealsByUserId(String username) throws ApiException {
        ApiResponse<List<Meal>> resp = getMealsByUserIdWithHttpInfo(username);
        return resp.getData();
    }

    /**
     * Finds meals by userId
     * 
     * @param username Username to use to find meals (required)
     * @return ApiResponse&lt;List&lt;Meal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Meal>> getMealsByUserIdWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = getMealsByUserIdValidateBeforeCall(username, null, null);
        Type localVarReturnType = new TypeToken<List<Meal>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds meals by userId (asynchronously)
     * 
     * @param username Username to use to find meals (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealsByUserIdAsync(String username, final ApiCallback<List<Meal>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealsByUserIdValidateBeforeCall(username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Meal>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserByName */
    private com.squareup.okhttp.Call getUserByNameCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByNameValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserByName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserByNameCall(username, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user by user name
     * 
     * @param username The name of the user that needs to be fetched. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User getUserByName(String username) throws ApiException {
        ApiResponse<User> resp = getUserByNameWithHttpInfo(username);
        return resp.getData();
    }

    /**
     * Get user by user name
     * 
     * @param username The name of the user that needs to be fetched. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> getUserByNameWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = getUserByNameValidateBeforeCall(username, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user by user name (asynchronously)
     * 
     * @param username The name of the user that needs to be fetched. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByNameAsync(String username, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByNameValidateBeforeCall(username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for loginUser */
    private com.squareup.okhttp.Call loginUserCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/login".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "username", username));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginUserValidateBeforeCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = loginUserCall(username, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String loginUser(String username, String password) throws ApiException {
        ApiResponse<String> resp = loginUserWithHttpInfo(username, password);
        return resp.getData();
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> loginUserWithHttpInfo(String username, String password) throws ApiException {
        com.squareup.okhttp.Call call = loginUserValidateBeforeCall(username, password, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Logs user into the system (asynchronously)
     * 
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginUserAsync(String username, String password, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginUserValidateBeforeCall(username, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logoutUser */
    private com.squareup.okhttp.Call logoutUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logoutUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = logoutUserCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Logs out current logged in user session
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void logoutUser() throws ApiException {
        logoutUserWithHttpInfo();
    }

    /**
     * Logs out current logged in user session
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> logoutUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = logoutUserValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Logs out current logged in user session (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutUserAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logoutUserValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateIngredientInPantry */
    private com.squareup.okhttp.Call updateIngredientInPantryCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/pantry/ingredients/{ingredientId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "ingredientId" + "\\}", apiClient.escapeString(ingredientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIngredientInPantryValidateBeforeCall(String username, String ingredientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateIngredientInPantry(Async)");
        }
        
        // verify the required parameter 'ingredientId' is set
        if (ingredientId == null) {
            throw new ApiException("Missing the required parameter 'ingredientId' when calling updateIngredientInPantry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateIngredientInPantryCall(username, ingredientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateIngredientInPantry(String username, String ingredientId) throws ApiException {
        updateIngredientInPantryWithHttpInfo(username, ingredientId);
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateIngredientInPantryWithHttpInfo(String username, String ingredientId) throws ApiException {
        com.squareup.okhttp.Call call = updateIngredientInPantryValidateBeforeCall(username, ingredientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with the pantry (required)
     * @param ingredientId Id of the ingredient to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIngredientInPantryAsync(String username, String ingredientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIngredientInPantryValidateBeforeCall(username, ingredientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateMealInMealPlan */
    private com.squareup.okhttp.Call updateMealInMealPlanCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/mealPlans/{mealPlanId}/meals/{mealId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealPlanId" + "\\}", apiClient.escapeString(mealPlanId.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMealInMealPlanValidateBeforeCall(String username, String mealPlanId, Long mealId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateMealInMealPlan(Async)");
        }
        
        // verify the required parameter 'mealPlanId' is set
        if (mealPlanId == null) {
            throw new ApiException("Missing the required parameter 'mealPlanId' when calling updateMealInMealPlan(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling updateMealInMealPlan(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateMealInMealPlanCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMealInMealPlan(String username, String mealPlanId, Long mealId) throws ApiException {
        updateMealInMealPlanWithHttpInfo(username, mealPlanId, mealId);
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMealInMealPlanWithHttpInfo(String username, String mealPlanId, Long mealId) throws ApiException {
        com.squareup.okhttp.Call call = updateMealInMealPlanValidateBeforeCall(username, mealPlanId, mealId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealPlanId Id of the mealPlan the meal is in (required)
     * @param mealId Id of the meal to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMealInMealPlanAsync(String username, String mealPlanId, Long mealId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMealInMealPlanValidateBeforeCall(username, mealPlanId, mealId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRecipe */
    private com.squareup.okhttp.Call updateRecipeCall(Long recipeId, Recipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRecipeValidateBeforeCall(Long recipeId, Recipe body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling updateRecipe(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRecipeCall(recipeId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing recipe
     * 
     * @param recipeId Recipe id to update (required)
     * @param body Recipe object that needs to be updated in the database (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRecipe(Long recipeId, Recipe body) throws ApiException {
        updateRecipeWithHttpInfo(recipeId, body);
    }

    /**
     * Update an existing recipe
     * 
     * @param recipeId Recipe id to update (required)
     * @param body Recipe object that needs to be updated in the database (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRecipeWithHttpInfo(Long recipeId, Recipe body) throws ApiException {
        com.squareup.okhttp.Call call = updateRecipeValidateBeforeCall(recipeId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an existing recipe (asynchronously)
     * 
     * @param recipeId Recipe id to update (required)
     * @param body Recipe object that needs to be updated in the database (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRecipeAsync(Long recipeId, Recipe body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRecipeValidateBeforeCall(recipeId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRecipeInCookbook */
    private com.squareup.okhttp.Call updateRecipeInCookbookCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/cookbooks/{cookbookId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "cookbookId" + "\\}", apiClient.escapeString(cookbookId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRecipeInCookbookValidateBeforeCall(String username, String cookbookId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateRecipeInCookbook(Async)");
        }
        
        // verify the required parameter 'cookbookId' is set
        if (cookbookId == null) {
            throw new ApiException("Missing the required parameter 'cookbookId' when calling updateRecipeInCookbook(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling updateRecipeInCookbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRecipeInCookbookCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRecipeInCookbook(String username, String cookbookId, Long recipeId) throws ApiException {
        updateRecipeInCookbookWithHttpInfo(username, cookbookId, recipeId);
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRecipeInCookbookWithHttpInfo(String username, String cookbookId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = updateRecipeInCookbookValidateBeforeCall(username, cookbookId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of cookbooks (required)
     * @param cookbookId Id of the cookbook to be created (required)
     * @param recipeId Id of the recipe to be added to the cookbook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRecipeInCookbookAsync(String username, String cookbookId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRecipeInCookbookValidateBeforeCall(username, cookbookId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRecipelInMeal */
    private com.squareup.okhttp.Call updateRecipelInMealCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{username}/meals/{mealId}/recipes/{recipeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()))
        .replaceAll("\\{" + "mealId" + "\\}", apiClient.escapeString(mealId.toString()))
        .replaceAll("\\{" + "recipeId" + "\\}", apiClient.escapeString(recipeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRecipelInMealValidateBeforeCall(String username, String mealId, Long recipeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateRecipelInMeal(Async)");
        }
        
        // verify the required parameter 'mealId' is set
        if (mealId == null) {
            throw new ApiException("Missing the required parameter 'mealId' when calling updateRecipelInMeal(Async)");
        }
        
        // verify the required parameter 'recipeId' is set
        if (recipeId == null) {
            throw new ApiException("Missing the required parameter 'recipeId' when calling updateRecipelInMeal(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRecipelInMealCall(username, mealId, recipeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a recipe within the specified meal in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRecipelInMeal(String username, String mealId, Long recipeId) throws ApiException {
        updateRecipelInMealWithHttpInfo(username, mealId, recipeId);
    }

    /**
     * Updates a recipe within the specified meal in the specified user&#39;s collection
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRecipelInMealWithHttpInfo(String username, String mealId, Long recipeId) throws ApiException {
        com.squareup.okhttp.Call call = updateRecipelInMealValidateBeforeCall(username, mealId, recipeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a recipe within the specified meal in the specified user&#39;s collection (asynchronously)
     * 
     * @param username Username associated with collection of meals (required)
     * @param mealId Id of the meal the recipe is in (required)
     * @param recipeId Id of the recipe to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRecipelInMealAsync(String username, String mealId, Long recipeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRecipelInMealValidateBeforeCall(username, mealId, recipeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUser */
    private com.squareup.okhttp.Call updateUserCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{username}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserCall(username, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUser(String username, User body) throws ApiException {
        updateUserWithHttpInfo(username, body);
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserWithHttpInfo(String username, User body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updated user (asynchronously)
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String username, User body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(username, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
