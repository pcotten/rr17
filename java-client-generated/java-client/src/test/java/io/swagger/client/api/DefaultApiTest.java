/*
 * Recipe Rex API
 * Rest services for Recipe Rex web application. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Cookbook;
import io.swagger.client.model.Meal;
import io.swagger.client.model.MealPlan;
import io.swagger.client.model.Recipe;
import io.swagger.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Adds an ingredient to a user&#39;s pantry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIngredientToPantryTest() throws ApiException {
        String username = null;
        String ingredientId = null;
        api.addIngredientToPantry(username, ingredientId);

        // TODO: test validations
    }
    
    /**
     * Adds a meal to the specified mealPlan in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMealToMealPlanTest() throws ApiException {
        String username = null;
        String mealPlanId = null;
        Long mealId = null;
        api.addMealToMealPlan(username, mealPlanId, mealId);

        // TODO: test validations
    }
    
    /**
     * Add a new recipe to the database
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRecipeTest() throws ApiException {
        Long recipeId = null;
        Recipe body = null;
        api.addRecipe(recipeId, body);

        // TODO: test validations
    }
    
    /**
     * Adds a recipe to the specified cookbook to the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRecipeToCookbookTest() throws ApiException {
        String username = null;
        String cookbookId = null;
        Long recipeId = null;
        api.addRecipeToCookbook(username, cookbookId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Adds a recipe to the specified meal to the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRecipeToMealTest() throws ApiException {
        String username = null;
        String mealId = null;
        Long recipeId = null;
        api.addRecipeToMeal(username, mealId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Creates a new cookbook to the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCookbookTest() throws ApiException {
        String username = null;
        String cookbookId = null;
        api.createCookbook(username, cookbookId);

        // TODO: test validations
    }
    
    /**
     * Creates a new meal to the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMealTest() throws ApiException {
        String username = null;
        String mealId = null;
        api.createMeal(username, mealId);

        // TODO: test validations
    }
    
    /**
     * Creates a new meal to the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMealPlanTest() throws ApiException {
        String username = null;
        String mealPlanId = null;
        api.createMealPlan(username, mealPlanId);

        // TODO: test validations
    }
    
    /**
     * Create user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String username = null;
        User body = null;
        api.createUser(username, body);

        // TODO: test validations
    }
    
    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIngredientFromPantryTest() throws ApiException {
        String username = null;
        String ingredientId = null;
        api.deleteIngredientFromPantry(username, ingredientId);

        // TODO: test validations
    }
    
    /**
     * Deletes a meal within the specified mealPlan in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMealFromMealPlanTest() throws ApiException {
        String username = null;
        String mealPlanId = null;
        Long mealId = null;
        api.deleteMealFromMealPlan(username, mealPlanId, mealId);

        // TODO: test validations
    }
    
    /**
     * Deletes a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecipeTest() throws ApiException {
        Long recipeId = null;
        api.deleteRecipe(recipeId);

        // TODO: test validations
    }
    
    /**
     * Deletes a recipe from the specified cookbook in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecipeFromMealTest() throws ApiException {
        String username = null;
        String mealId = null;
        Long recipeId = null;
        api.deleteRecipeFromMeal(username, mealId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecipeInCookbookTest() throws ApiException {
        String username = null;
        String cookbookId = null;
        Long recipeId = null;
        api.deleteRecipeInCookbook(username, cookbookId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Delete user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String username = null;
        api.deleteUser(username);

        // TODO: test validations
    }
    
    /**
     * Fetch all recipes in the specified cookbook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCookbookRecipesTest() throws ApiException {
        String username = null;
        String cookbookId = null;
        List<Recipe> response = api.getCookbookRecipes(username, cookbookId);

        // TODO: test validations
    }
    
    /**
     * Finds cookbooks by userId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCookbooksByUserIdTest() throws ApiException {
        String username = null;
        List<Cookbook> response = api.getCookbooksByUserId(username);

        // TODO: test validations
    }
    
    /**
     * Fetch all meals in the specified mealPlan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMealPlanMealsTest() throws ApiException {
        String username = null;
        String mealPlanId = null;
        List<Meal> response = api.getMealPlanMeals(username, mealPlanId);

        // TODO: test validations
    }
    
    /**
     * Finds mealPlans by userId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMealPlansByUserIdTest() throws ApiException {
        String username = null;
        List<MealPlan> response = api.getMealPlansByUserId(username);

        // TODO: test validations
    }
    
    /**
     * Fetch all recipes in the specified meal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMealRecipesTest() throws ApiException {
        String username = null;
        String mealId = null;
        List<Recipe> response = api.getMealRecipes(username, mealId);

        // TODO: test validations
    }
    
    /**
     * Finds meals by userId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMealsByUserIdTest() throws ApiException {
        String username = null;
        List<Meal> response = api.getMealsByUserId(username);

        // TODO: test validations
    }
    
    /**
     * Get user by user name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByNameTest() throws ApiException {
        String username = null;
        User response = api.getUserByName(username);

        // TODO: test validations
    }
    
    /**
     * Logs user into the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUserTest() throws ApiException {
        String username = null;
        String password = null;
        String response = api.loginUser(username, password);

        // TODO: test validations
    }
    
    /**
     * Logs out current logged in user session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutUserTest() throws ApiException {
        api.logoutUser();

        // TODO: test validations
    }
    
    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIngredientInPantryTest() throws ApiException {
        String username = null;
        String ingredientId = null;
        api.updateIngredientInPantry(username, ingredientId);

        // TODO: test validations
    }
    
    /**
     * Updates a meal within the specified mealPlan in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMealInMealPlanTest() throws ApiException {
        String username = null;
        String mealPlanId = null;
        Long mealId = null;
        api.updateMealInMealPlan(username, mealPlanId, mealId);

        // TODO: test validations
    }
    
    /**
     * Update an existing recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRecipeTest() throws ApiException {
        Long recipeId = null;
        Recipe body = null;
        api.updateRecipe(recipeId, body);

        // TODO: test validations
    }
    
    /**
     * Updates a recipe within the specified cookbook in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRecipeInCookbookTest() throws ApiException {
        String username = null;
        String cookbookId = null;
        Long recipeId = null;
        api.updateRecipeInCookbook(username, cookbookId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Updates a recipe within the specified meal in the specified user&#39;s collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRecipelInMealTest() throws ApiException {
        String username = null;
        String mealId = null;
        Long recipeId = null;
        api.updateRecipelInMeal(username, mealId, recipeId);

        // TODO: test validations
    }
    
    /**
     * Updated user
     *
     * This can only be done by the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String username = null;
        User body = null;
        api.updateUser(username, body);

        // TODO: test validations
    }
    
}
