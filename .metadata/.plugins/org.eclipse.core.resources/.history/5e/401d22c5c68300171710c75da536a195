package com.reciperex.storage.entity;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.json.simple.parser.JSONParser;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.reciperex.model.Meal;
import com.reciperex.model.User;
import com.reciperex.storage.service.DatabaseConfig;
import com.reciperex.storage.service.DatabaseManager;
import com.reciperex.storage.service.SQLBuilder;

public class MealService {

	DatabaseConfig config = new DatabaseConfig();
//	QueryRunner queryRunner = new QueryRunner();
//	ObjectMapper mapper = new ObjectMapper();
//	JSONParser parser = new JSONParser();
	DatabaseManager manager = new DatabaseManager();
	
	Connection conn = null;
	Statement stmt = null;
	PreparedStatement pstmt = null;
	String sql = null;
	Map<String, String> constraints = new HashMap<String, String>();
	
	public MealService(){
		
	}

	
	public int insertNewMeal(Meal meal){
		Savepoint savepoint;
		String result = null;
		int r = 0;
		
		try {
			conn = manager.getConnection();
			savepoint = conn.setSavepoint();
			try {
				r = insertMealEntity(meal);
				if (r != 0){
					System.out.println("Meal entity " + meal.getName() + " successfully inserted into database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to insert meal entity");
					throw new SQLException();
				}
				
				meal.setId(getIdForNewMeal(meal));
		
								
				r = linkRecipesToMeal(meal);
				if (r != 0){
					System.out.println("Meal recipes successfully linked in database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to link recipes");
					throw new SQLException();
				}
				
				r = linkMealToUser(meal);
				if (r != 0){
					System.out.println("Meal successfully linked to user in database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to link meal to user");
					throw new SQLException();
				}
				
			} catch (SQLException e) {
				System.out.println("Attempting rollback");
				conn.rollback(savepoint);
				e.printStackTrace();
			}
		} catch (SQLException e1) {
			System.out.println("Unable to perform rollback.");
			e1.printStackTrace();
		}
		System.out.println(result);
		return r;
	}
	
	
	public int insertMealEntity(Meal meal){
		
		String result = null;
		conn = manager.getConnection();
		int r = 0;
		try {
		pstmt = conn.prepareStatement("INSERT INTO meal (name, lastPrepared)"
				+ "VALUES (?, ?);", Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, meal.getName());
		pstmt.setObject(2, meal.getLastPrepared());
		r = pstmt.executeUpdate();
		ResultSet rs = pstmt.getGeneratedKeys();
		if (rs.next()){
			System.out.println(rs.getString("GENERATED_KEY"));
		}
			if (r != 0){
				result = "Meal successfully inserted into database";
			}
			else result = "Meal not created";
			
		} catch (SQLException e) {
			System.out.println("Unable to insert meal into database");
			e.printStackTrace();
		}
		System.out.println(result);
		return r;
	}


	private int linkMealToUser(Meal meal) {
		// TODO Auto-generated method stub
		return 0;
	}


	private int linkRecipesToMeal(Meal meal) {
		// TODO Auto-generated method stub
		return 0;
	}


	private Integer getIdForNewMeal(Meal meal) {
//		constraints.clear();
//		constraints.put("name", SQLBuilder.toSQLString(meal.getName()));
//		constraints.put("owner", meal.getOwner().toString());
//		
//		sql = "SELECT id FROM meal WHERE name = \"" + meal.getName() + "\" AND owner = " + meal.getOwner();
//		if (conn.isClosed()){
//			conn = manager.getConnection();
//		}
//		List<Map<String, Object>> idMapList = manager.mapListQuery(conn,  sql);
//		Integer id = (Integer) idMapList.get(0).get("id");
//		return id;
		return null;
	}
	
	public int deleteMeal(Integer id){
		
		return id;
	}
}
