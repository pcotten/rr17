package com.reciperex.storage.entity.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.json.simple.parser.JSONParser;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.reciperex.model.User;
import com.reciperex.storage.entity.ImageService;
import com.reciperex.storage.entity.PantryService;
import com.reciperex.storage.entity.RecipeService;
import com.reciperex.storage.entity.UserService;
import com.reciperex.storage.service.DatabaseConfig;
import com.reciperex.storage.service.DatabaseManager;
import com.reciperex.storage.service.SQLBuilder;

public class UserServiceImpl implements UserService {

	DatabaseConfig config = new DatabaseConfig();
	QueryRunner queryRunner = new QueryRunner();
	ObjectMapper mapper = new ObjectMapper();
	JSONParser parser = new JSONParser();
	DatabaseManager manager = new DatabaseManager();
	
	Connection conn = null;
	Statement stmt = null;
	PreparedStatement pstmt = null;
	String sql = null;
	
	public UserServiceImpl(){
		
	}
	
	public int insertNewUser(User user){
		Savepoint savepoint;

		int r = 0;
		
		try {
			
			if (user.getPantryCode() == null){
				PantryService pantryService = new PantryServiceImpl();
				user.setPantryCode(pantryService.insertNewPantry(null));
			}
			
			conn = manager.getConnection();
			savepoint = conn.setSavepoint();
			try {
				user = insertUserEntity(user);
				if (user.getId() != null){
					r = 1;
				}
				if (r != 0){
					System.out.println("User entity " + user.getUsername() + " successfully inserted into database");
				}
				else {
					System.out.println("Unable to complete user insert - failed to insert user entity");
					throw new SQLException();
				}
				
				
				
			} catch (SQLException e) {
				System.out.println("Attempting rollback");
				conn.rollback(savepoint);
				e.printStackTrace();
			}
		} catch (SQLException e1) {
			System.out.println("Unable to perform rollback.");
			e1.printStackTrace();
		}
		
		return r;
	}
	
	public User insertUserEntity(User user){

		conn = manager.getConnection();
		int r = 0;
		try {
			pstmt = conn.prepareStatement("INSERT INTO user (username, password, email, bio, "
					+ "firstName, lastName, city, state, country, gender, pantryCode) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getPassword());
			pstmt.setString(3, user.getEmail());
			pstmt.setString(4, user.getBio());
			pstmt.setString(5, user.getFirstName());
			pstmt.setString(6, user.getLastName());
			pstmt.setString(7, user.getCity());
			pstmt.setString(8, user.getState());
			pstmt.setString(9, user.getCountry());
			pstmt.setString(10, user.getGender().toString());
			pstmt.setString(11, user.getPantryCode());
			
			r = pstmt.executeUpdate();
			ResultSet rs = pstmt.getGeneratedKeys();
			if (rs.next()){
				Integer id = Integer.valueOf(rs.getString("GENERATED_KEY"));
				user.setId(id);
			}
			if (r != 0){
				System.out.println("User " + user.getUsername() + " successfully inserted into database");
			}
			else {
				System.out.println("User " + user.getUsername() + " not created");
			}
			
		} catch (SQLException e) {
			System.out.println("Unable to insert " + user.getId() + " into database");
			e.printStackTrace();
		}

		return user;
	}
	
	public int updateUser(User user){
		//TODO
		return 0;
	}
	
	public int deleteUser(Integer id) throws SQLException{
		ImageService imageService = new ImageServiceImpl();
		RecipeService recipeService = new RecipeServiceImpl();
		ResultSet resultSet = null;
		Map<String,String> constraints = new HashMap<String, String>();
		constraints.put("id", id.toString());
		User user = (User) manager.retrieveSingleEntity(constraints, User.class);
		int result = -1;
		/* remove referenced images from image table */
		conn = manager.getConnection();
		pstmt = conn.prepareStatement("SELECT * FROM image WHERE userId = ?");
		pstmt.setInt(1, id);
		resultSet = pstmt.executeQuery();
		while (resultSet.next()){
			imageService.deleteImage(resultSet.getInt("id"));
		}
		// SHOULD THERE BE ERROR HANDLING HERE?
		
		/* remove references to recipes in recipe_user, and remove 
		 * recipe entities if no other references are present */
		pstmt = conn.prepareStatement("SELECT * FROM user_recipe WHERE userId = ?");
		pstmt.setInt(1, id);
		resultSet = pstmt.executeQuery();
		while(resultSet.next()){
			ResultSet innerResultSet = null;
			Integer recipeId = resultSet.getInt("recipeId");
			pstmt = conn.prepareStatement("SELECT * FROM user_recipe WHERE recipeId = ?");
			pstmt.setInt(1, recipeId);
			innerResultSet = pstmt.executeQuery();
			if (!innerResultSet.next()){
				recipeService.deleteRecipe(recipeId);
			}
			pstmt = conn.prepareStatement("DELETE FROM user_recipe WHERE userId = ? AND recipeId = ?");
			pstmt.setInt(1, id);
			pstmt.setInt(2, recipeId);
			result = pstmt.executeUpdate();
			if (result == 0){
				System.out.println("Removed reference from user_recipe : userId = " + id + " , recipeId = " + recipeId);
			}
			else {
				System.out.println("Error while removing reference from user_recipe");
			}
		}
		
		/* remove references to meals in meal_user, and remove 
		 * meal entities if no other references are present */
		pstmt = conn.prepareStatement("SELECT * FROM meal_user WHERE userId = ?");
		pstmt.setInt(1, id);
		resultSet = pstmt.executeQuery();
		while(resultSet.next()){
			ResultSet innerResultSet = null;
			Integer mealId = resultSet.getInt("recipeId");
			pstmt = conn.prepareStatement("SELECT * FROM meal_user WHERE mealId = ?");
			pstmt.setInt(1, mealId);
			innerResultSet = pstmt.executeQuery();
			if (!innerResultSet.next()){
				recipeService.deleteRecipe(mealId);
			}
			pstmt = conn.prepareStatement("DELETE FROM meal_user WHERE userId = ? AND mealId = ?");
			pstmt.setInt(1, id);
			pstmt.setInt(2, mealId);
			result = pstmt.executeUpdate();
			if (result == 0){
				System.out.println("Removed reference from meal_user : userId = " + id + " , mealId = " + mealId);
			}
			else {
				System.out.println("Error while removing reference from meal_user");
			}
		}
		
		/* remove references to mealPlans in user_mealplan, and remove 
		 * mealPlan entities if no other references are present */
		pstmt = conn.prepareStatement("SELECT * FROM user_mealplan WHERE userId = ?");
		pstmt.setInt(1, id);
		resultSet = pstmt.executeQuery();
		while(resultSet.next()){
			ResultSet innerResultSet = null;
			Integer mealPlanId = resultSet.getInt("recipeId");
			pstmt = conn.prepareStatement("SELECT * FROM user_mealplan WHERE mealPlanId = ?");
			pstmt.setInt(1, mealPlanId);
			innerResultSet = pstmt.executeQuery();
			if (!innerResultSet.next()){
				recipeService.deleteRecipe(mealPlanId);
			}
			pstmt = conn.prepareStatement("DELETE FROM user_mealplan WHERE userId = ? AND mealPlanId = ?");
			pstmt.setInt(1, id);
			pstmt.setInt(2, mealPlanId);
			result = pstmt.executeUpdate();
			if (result == 0){
				System.out.println("Removed reference from user_mealplan : userId = " + id + " , mealPlanId = " + mealPlanId);
			}
			else {
				System.out.println("Error while removing reference from user_mealplan");
			}
		}
		
		/* remove references to cookbooks in user_cookbook, and remove 
		 * cookbook entities if no other references are present */
		pstmt = conn.prepareStatement("SELECT * FROM user_cookbook WHERE userId = ?");
		pstmt.setInt(1, id);
		resultSet = pstmt.executeQuery();
		while(resultSet.next()){
			ResultSet innerResultSet = null;
			Integer cookbookId = resultSet.getInt("recipeId");
			pstmt = conn.prepareStatement("SELECT * FROM user_cookbook WHERE cookbookId = ?");
			pstmt.setInt(1, cookbookId);
			innerResultSet = pstmt.executeQuery();
			if (!innerResultSet.next()){
				recipeService.deleteRecipe(cookbookId);
			}
			pstmt = conn.prepareStatement("DELETE FROM user_cookbook WHERE userId = ? AND cookbookId = ?");
			pstmt.setInt(1, id);
			pstmt.setInt(2, cookbookId);
			result = pstmt.executeUpdate();
			if (result == 0){
				System.out.println("Removed reference from meal_user : userId = " + id + " , cookbookId = " + cookbookId);
			}
			else {
				System.out.println("Error while removing reference from user_cookbook");
			}
		}
		
		/* remove references to friend users in user_user */
		//TODO
		
		/* remove user entity */
		
		result = manager.DeleteEntity("user", constraints);
		if (result == 0){
			System.out.println("User entity deleted from database");
		}
		else {
			System.out.println("Failed to delete user - unable to delete user entity");
			return -1;
		}
		
		
		
		

		return result;
	}
	
	public User getUserByUsername(String username){
		Map<String, String> constraints = new HashMap<String, String>();
		constraints.put("username", SQLBuilder.toSQLString(username));
		return (User) manager.retrieveSingleEntity(constraints, User.class);
	}
}
