package com.reciperex.storage.entity.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

import org.apache.commons.dbutils.QueryRunner;
import org.json.simple.parser.JSONParser;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.reciperex.model.Cookbook;
import com.reciperex.model.User;
import com.reciperex.storage.entity.CookbookService;
import com.reciperex.storage.service.DatabaseConfig;
import com.reciperex.storage.service.DatabaseManager;

public class CookbookServiceImpl implements CookbookService {

	DatabaseConfig config = new DatabaseConfig();
//	QueryRunner queryRunner = new QueryRunner();
//	ObjectMapper mapper = new ObjectMapper();
//	JSONParser parser = new JSONParser();
	DatabaseManager manager = new DatabaseManager();
	
	Connection conn = null;
	Statement stmt = null;
	Statement pstmt = null;
	String sql = null;
	
	public CookbookServiceImpl(){
		
	}
	
	
	public int insertNewCookbook(Cookbook cookbook, Integer userId){
		
		Savepoint savepoint;

		int r = 0;
		
		try {
			conn = manager.getConnection();
			savepoint = conn.setSavepoint();
			try {
				cookbook = insertCookbookEntity(cookbook);
				if (cookbook.getId() != null){
					r = 1;
				}
				if (r != 0){
					System.out.println("Meal entity " + cookbook.getName() + " successfully inserted into database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to insert meal entity");
					throw new SQLException();
				}
								
				r = linkRecipesToCookbook(cookbook);
				if (r != 0){
					System.out.println("Meal recipes successfully linked in database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to link recipes");
					throw new SQLException();
				}
				
				r = linkCookbookToUser(cookbook, userId);
				if (r != 0){
					System.out.println("Meal successfully linked to user in database");
				}
				else {
					System.out.println("Unable to complete meal insert - failed to link meal to user");
					throw new SQLException();
				}
				
			} catch (SQLException e) {
				System.out.println("Attempting rollback");
				conn.rollback(savepoint);
				e.printStackTrace();
			}
		} catch (SQLException e1) {
			System.out.println("Unable to perform rollback.");
			e1.printStackTrace();
		}
		return r;
	}


	private int insertCookbookEntity(Cookbook cookbook) {
		String result = null;
		conn = manager.getConnection();
		int r = 0;
		pstmt = conn.prepareStatement("INSERT INTO meal (name, lastPrepared)"
				+ "VALUES (?, ?);", Statement.RETURN_GENERATED_KEYS);
		pstmt.setString(1, meal.getName());
		pstmt.setObject(2, meal.getLastPrepared());
		r = pstmt.executeUpdate();
		ResultSet rs = pstmt.getGeneratedKeys();
		if (rs.next()){
			Integer id = Integer.valueOf(rs.getString("GENERATED_KEY"));
			meal.setId(id);
		}
		if (r != 0 && meal.getId() != null){
			System.out.println("Meal entity successfully inserted into database");
		}
		else {
			System.out.println("Meal creation failed - unable to insert meal entity");
			throw new SQLException();
		}
		
		return meal;
	}


	private int linkRecipesToCookbook(Cookbook cookbook) {
		// TODO Auto-generated method stub
		return 0;
	}


	private int linkCookbookToUser(Cookbook cookbook, Integer userId) {
		// TODO Auto-generated method stub
		return 0;
	}


	public int updateCookbook(Cookbook cookbook) {
		// TODO Auto-generated method stub
		return 0;
	}


	public int deleteCookbook(Integer id) {
		// TODO Auto-generated method stub
		return 0;
	}
}
