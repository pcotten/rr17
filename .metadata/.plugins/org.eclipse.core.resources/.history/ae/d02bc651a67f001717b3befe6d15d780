package com.reciperex.storage.service;

import java.io.IOException;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.ArrayHandler;
import org.apache.commons.dbutils.handlers.MapListHandler;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.apache.commons.dbutils.DbUtils;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.cj.x.json.JsonArray;
import com.mysql.cj.x.json.JsonParser;
import com.reciperex.model.Ingredient;
import com.reciperex.model.User;

public class DatabaseManager {
	
	DatabaseConfig config = new DatabaseConfig();
	QueryRunner queryRunner = new QueryRunner();
	ObjectMapper mapper = new ObjectMapper();
	JSONParser parser = new JSONParser();
	
	Connection conn = null;
	Statement stmt = null;
	Statement pstmt = null;
	String sql = null;
	
	
	public DatabaseManager(){
		init();
	}
	 
	private void init(){
		 try {
			Class.forName(config.JDBC_DRIVER);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	 }
	
	public Object retrieveSingleEntity(Integer id, Class cls){
		
		Object entity = null;
		
		List<Map<String, Object>> mapList = null;
		JSONArray jArray = null;
		JSONObject jObj = null;
		conn = getConnection();
		sql = "SELECT * FROM " + cls.getSimpleName().toLowerCase() + " WHERE id = " + id + ";";
		mapList = mapListQuery(conn, sql);
		String json = mapToJSON(mapList);
		try {
			entity = cls.newInstance();
			jArray = (JSONArray) parser.parse(json);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (jArray != null){
			json = jArray.get(0).toString();
		}
		entity = mapToObject(json, cls);
		
		return entity;
	}
	
	public List<Object> retrieveEntities(String type){
		
		Object entity = null;
		List<Object> entityList = new ArrayList<Object>();
		
		List<Map<String, Object>> mapList = null;
		JSONArray jArray = null;
		JSONObject jObj = null;
		conn = getConnection();
		sql = "SELECT * FROM " + type.toLowerCase() + ";";
		mapList = mapListQuery(conn, sql);
		String json = mapToJSON(mapList);
		try {
			entity = Class.forName("com.reciperex.model." + type).newInstance();
			jArray = (JSONArray) parser.parse(json);
			if (jArray != null){
				for (Object o : jArray){
//					json = jArray.get(jArray.indexOf(o)).toString();
					entityList.add(mapToObject(o.toString(), Class.forName("com.reciperex.model." + type)));
				}
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return entityList;
	}
	
	public String insertNewUser(User user){
		String result = null;
		conn = getConnection();
		
		sql = "INSERT INTO `user` (`username`, `password`, `email`, `pantryId`, "
				+ "`bio`, `firstName`, `lastName`, `city`, `state`, `country`, `gender`) "
				+ "VALUES ('" + user.getUsername() + "','" + user.getPassword() + "','" + user.getEmail() 
				+ "','" + user.getPantryId() + "','" + user.getBio() + "','" + user.getFirstName() 
				+ "','" + user.getLastName() + "','" + user.getCity() + "','" + user.getState() 
				+ "','" + user.getCountry() + "','" + user.getGender() + ");";
		
		try {
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);
			if (rs != null){
			result = "SUCCESS";
		}
		else result = "FAILURE";
			
		} catch (SQLException e) {
			System.out.println("Unable to insert " + user.getId() + " into database");
			e.printStackTrace();
		}

		return result;
	}

//	public User retrieveUser(Integer id){
//		
//		User user = null;
//		List<Map<String, Object>> mapList = null;
//		JSONArray jArray = null;
//		JSONObject jObj = null;
//		conn = getConnection();
//		sql = "SELECT * FROM user WHERE id = " + id + ";";
//		mapList = mapListQuery(conn, sql);
//		String json = mapToJSON(mapList);
//		try {
//			jArray = (JSONArray) parser.parse(json);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		if (jArray != null){
//			json = jArray.get(0).toString();
//		}
//		user = (User)mapToObject(json, User.class);
//		
//		return user;
//	}
//	
//	public Ingredient retrieveIngredient(Integer id){
//		
//		Ingredient ingredient = null;
//		List<Map<String, Object>> mapList = null;
//		JSONArray jArray = null;
//		JSONObject jObj = null;
//		conn = getConnection();
//		sql = "SELECT * FROM ingredient WHERE id = " + id + ";";
//		mapList = mapListQuery(conn, sql);
//		String json = mapToJSON(mapList);
//		try {
//			jArray = (JSONArray) parser.parse(json);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		if (jArray != null){
//			json = jArray.get(0).toString();
//		}
//		ingredient = (Ingredient)mapToObject(json, Ingredient.class);
//		
//		return ingredient;
//	}
	
	private List<Map<String, Object>> mapListQuery(Connection conn, String sql){
		List<Map<String, Object>> mapList = null;
		
		try {
			mapList = queryRunner.query(conn, sql, new MapListHandler());
		} catch (SQLException e) {
			System.out.println("Unable to execute query: " + sql);
			e.printStackTrace();
		} finally {
			DbUtils.closeQuietly(conn);
		}
		
		return mapList;
	}
	
	private String mapToJSON(Object object){
		
		String json = null;
		try {
			json = mapper.writeValueAsString(object);
			if (json == null){
				System.out.println("Result was empty");
			}
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return json;
	}
	
	private Object mapToObject(String json, Class cls){
		
		Object result = null;
		try {
			result = mapper.readValue(json, cls);
		
		} catch (JsonParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return result;
	}
	
	private Connection getConnection(){
		Connection connection = null;
		try {
			connection = DriverManager.getConnection(config.DB_URL, config.USER, config.PASS);
			if (connection == null){
				throw new SQLException();
			}
		} catch (SQLException e) {
			System.out.println("Unable to connect to database");
			e.printStackTrace();
		}
		return connection;
	}
}
