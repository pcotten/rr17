package com.reciperex.storage.entity.test;

import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.reciperex.model.Category;
import com.reciperex.model.Cookbook;
import com.reciperex.model.Image;
import com.reciperex.model.Meal;
import com.reciperex.model.MealPlan;
import com.reciperex.model.Recipe;
import com.reciperex.model.User;
import com.reciperex.storage.entity.CategoryService;
import com.reciperex.storage.entity.CookbookService;
import com.reciperex.storage.entity.ImageService;
import com.reciperex.storage.entity.IngredientService;
import com.reciperex.storage.entity.InstructionService;
import com.reciperex.storage.entity.MealPlanService;
import com.reciperex.storage.entity.MealService;
import com.reciperex.storage.entity.RecipeService;
import com.reciperex.storage.entity.UserService;
import com.reciperex.storage.entity.impl.CategoryServiceImpl;
import com.reciperex.storage.entity.impl.CookbookServiceImpl;
import com.reciperex.storage.entity.impl.ImageServiceImpl;
import com.reciperex.storage.entity.impl.MealPlanServiceImpl;
import com.reciperex.storage.entity.impl.MealServiceImpl;
import com.reciperex.storage.entity.impl.RecipeServiceImpl;
import com.reciperex.storage.entity.impl.UserServiceImpl;
import com.reciperex.storage.service.DatabaseManager;

public class CategoryService_Test {

	DatabaseManager manager;
	Category category;
	CategoryService categoryService = new CategoryServiceImpl();

	@Before
	public void init(){
		manager = new DatabaseManager();
		category = new Category();
	}
	
	@Test
	public void CategoryService_CRUD() throws SQLException {
		int result = 0;
		
		// Test create operation
		result = categoryService.insertNewCategory(category);
		Assert.assertTrue(result == 1);
		
		category = categoryService.getCategoryByName(category.getName());
		
		// Set up internal references to entities for deletion test
		recipeService.insertNewRecipe(recipe, user.getId());

		meal.getRecipes().add(recipe.getId());
		mealService.insertNewMeal(meal, user.getId());

		mealPlan.getMeals().add(meal.getId());
		mealPlanService.insertNewMealPlan(mealPlan, user.getId());

		cookbook.setCreatorId(user.getId());
		cookbook.getRecipes().add(recipe.getId());
		cookbookService.insertNewCookbook(cookbook, user.getId());

		profilePic.setRecipeId(null);
		profilePic.setUserId(user.getId());
		imageService.insertNewImage(profilePic);
		user.setProfilePic(profilePic);
		
		// Test update operation
		
		user.setBio("Changed bio for testUser");
		user.setAge(42);
		user.setEmail("someone@somewhere.com");
		
		result = userService.updateUser(user);
		Assert.assertTrue(result == 1);
		
		// Test delete operation
		result = -1;
		try {
			result = userService.deleteUser(user.getId());
//			result = userService.deleteUser(59);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Assert.assertTrue(result != -1);
		
		// Check database for user
		Connection conn = manager.getConnection();
		
		Statement stmt = conn.createStatement();
		String sql = "SELECT COUNT(*) FROM user WHERE id = " + user.getId();
		ResultSet rs = stmt.executeQuery(sql);
		rs.next();
		Assert.assertTrue(rs.getInt("COUNT(*)") == 0);
		
	}


}
