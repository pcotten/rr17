package com.reciperex.storage.entity;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.json.simple.parser.JSONParser;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.reciperex.model.Ingredient;
import com.reciperex.model.Recipe;
import com.reciperex.model.User;
import com.reciperex.storage.service.DatabaseConfig;
import com.reciperex.storage.service.DatabaseManager;
import com.reciperex.storage.service.SQLBuilder;

public class RecipeService {

	DatabaseConfig config = new DatabaseConfig();
	QueryRunner queryRunner = new QueryRunner();
	ObjectMapper mapper = new ObjectMapper();
	JSONParser parser = new JSONParser();
	DatabaseManager manager = new DatabaseManager();
	
	Connection conn = null;
	Statement stmt = null;
	PreparedStatement pstmt = null;
	String sql = null;
	Map<String, String> constraints = new HashMap<String, String>();
	IngredientService ingredientService = new IngredientService();
	
	public RecipeService(){
		
	}
	
	
	public int insertNewRecipe(Recipe recipe, Integer userId){
		Savepoint savepoint;
		String result = null;
		boolean allIngredientsExist = true;
		int r = 0;
		try {
			conn = manager.getConnection();
			savepoint = conn.setSavepoint();
			try {
				// insert Recipe entity
				pstmt = conn.prepareStatement("INSERT INTO recipe (title, description, owner, attributedTo, "
					+ "numberOfServings, ovenTemp, servingSize, cookTime, prepTime) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);");
				pstmt.setString(1, recipe.getTitle());
				pstmt.setString(2, recipe.getDescription());
				pstmt.setInt(3, recipe.getOwner());
				pstmt.setString(4, recipe.getAttributedTo());
				pstmt.setInt(5, recipe.getNumberOfServings());
				pstmt.setInt(6, recipe.getOvenTemp());
				pstmt.setString(7, recipe.getServingSize());
				pstmt.setString(8, recipe.getCookTime());
				pstmt.setString(9, recipe.getPrepTime());
				
				r = pstmt.executeUpdate();
				if (r != 0){
					result = "Recipe entity" + recipe.getTitle() + " successfully inserted into database";
				}
				else result = "Recipe entity" + recipe.getTitle() + " not created";
				
				// insert ingredients
				
				constraints.clear();
				String ingredientList = "";
				for (String s : recipe.getIngredients().keySet()){
					ingredientList += SQLBuilder.toSQLString(s) + ",";
				}
				ingredientList = ingredientList.substring(0, ingredientList.length()-1);
				sql = "SELECT id, name FROM ingredient WHERE name IN (" + ingredientList + ");";
	
				System.out.println(sql);
	//			conn = manager.getConnection();
				List<Map<String, Object>> mapList = manager.mapListQuery(conn, sql);
	
				System.out.println("MapList : " + mapList);
				
				for (String s : recipe.getIngredients().keySet()){
					boolean exists = false;
					for (Map m : mapList){
						if (s.equals(m.get("name"))){
							exists = true;
							break;
						}
					}
					if (!exists){
						allIngredientsExist = false;
						Ingredient newIngredient = new Ingredient(s, null);
						int insertResult = ingredientService.insertNewIngredient(newIngredient);
						if (insertResult != 1){
							System.out.println("Ingredient " + s + "could not be added to database.");
							throw new SQLException();
						}
					}
				}
				constraints.clear();
				constraints.put("title", recipe.getTitle());
				constraints.put("owner", recipe.getOwner().toString());
				recipe = (Recipe) manager.retrieveSingleEntity(constraints, Recipe.class);
				
				if (!allIngredientsExist) {
					mapList = manager.mapListQuery(conn, sql);
				}
				
				r = linkIngredientsToRecipe(mapList, recipe);
				
				
			} catch (SQLException e) {
				System.out.println("Unable to insert " + recipe.getId() + " into database");
				conn.rollback(savepoint);
				e.printStackTrace();
			}
		} catch (SQLException e1) {
			System.out.println("Unable to perform rollback.");
			e1.printStackTrace();
		}
		System.out.println(result);
		return r;
		
		
	}
	
	private int linkIngredientsToRecipe(List<Map<String, Object>> ingredientMapList, Recipe recipe) {
		int result = 0;
		try {
			if (conn.isClosed()){
				conn = manager.getConnection();
			}
			Map<String, Integer> ingredientMap = new HashMap<String, Integer>();
			for (Map m : ingredientMapList){
				ingredientMap.put(m.get("name").toString(), Integer.valueOf(m.get("id").toString()));
			}
			
			for (String m : recipe.getIngredients().keySet()){
				
				pstmt = conn.prepareStatement("INSERT INTO ingredient_recipe (recipeId, ingredientId, quantity) VALUES (?, ?, ?)");
				pstmt.setInt(1, recipe.getId());
				pstmt.setInt(2, ingredientMap.get(m));
				pstmt.setString(3, recipe.getIngredients().get(m));
				
				result = pstmt.executeUpdate();
				
				if (result != 1){
					System.out.println("Unable to create link between recipe '" + recipe.getTitle() + " and ingredient '" + m + "'");
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return result;
	}


	public int deleteURecipe(Integer id){
		int result = -1;
		Map<String,String> constraints = new HashMap<String, String>();
		constraints.put("id", id.toString());
		result = manager.DeleteEntity("recipe", constraints);
		return result;
	}
}
